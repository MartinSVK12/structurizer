[gd_resource type="BoxMesh" load_steps=3 format=3 uid="uid://d0uhxvuuo4u1m"]

[sub_resource type="Shader" id="Shader_0jcwp"]
resource_local_to_scene = true
code = "shader_type spatial;

uniform vec3 scale = vec3(1.0);
uniform float width: hint_range(0.0, 10.0) = 0.05;
uniform float sharpness: hint_range(0.0, 1.0) = 1;
uniform float glow: hint_range(1.0, 16.0) = 1.0;
uniform vec4 color: source_color = vec4(1.0);
uniform sampler2D tex: source_color;

varying vec3 vert;
varying vec3 normal;

void vertex(){
	VERTEX += sign(VERTEX) * (scale - 1.0) * 0.5;
	
	vert = VERTEX;
	normal = abs(NORMAL);
}

void fragment(){
	vec3 fv = fract(vec3(vert.x, vert.y * -1.0, vert.z));
	vec3 vs = abs(vert) - scale * 0.5;
	float ws = width * sharpness;
	
	ALPHA = 1.0 - (float(width < length(vs.xy)) 
		* float(width < length(vs.yz)) 
		* float(width < length(vs.xz)));
	ALBEDO = ( texture(tex, fv.zy).rgb * normal.x + texture(tex, fv.xz).rgb * normal.y + texture(tex, fv.xy).rgb * normal.z ) 
		* float(width < length(vs.xy)) 
		* float(width < length(vs.yz)) 
		* float(width < length(vs.xz)
		);
	EMISSION = (1.0 - smoothstep(ws, width, length(vs.xy)) * smoothstep(ws, width, length(vs.yz)) * smoothstep(ws, width, length(vs.xz))) * color.rgb * glow;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_h6mrx"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_0jcwp")
shader_parameter/scale = Vector3(1, 1, 1)
shader_parameter/width = 0.05
shader_parameter/sharpness = 1.0
shader_parameter/glow = 1.0
shader_parameter/color = Color(1, 1, 1, 1)

[resource]
resource_local_to_scene = true
material = SubResource("ShaderMaterial_h6mrx")
size = Vector3(1.01, 1.01, 1.01)
